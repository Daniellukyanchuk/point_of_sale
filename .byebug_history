exit
left_arr
right_arr
left_arr
left_array
combined_array
exit
combined_array
right_arr
right_arr[ri]
left_arr[li]
left_arr
exit
right_arr.length
left_arr.length
combined_array
right[ri]
left[li]
right_arr
left_arr
exit
right_arr[ri]
left_arr[li]
right_arr
left_arr
exit
left_arr
c
left_arr
li
exit
sorted_arr
right_array
left_array
exit
right_array
left_array
sorted_arr
exit
array
merge_sort(left_array)
left_array
right_array
sorted_arr
exit
right_array
left_array
splitted_array
exit
splitted_array
exit
left_array
right_array
splitted_array
exit
left_array
right_array
splitted_array
exit
left_array
left_rray
right_array
splitted_array
exit
right_array
left_array
right_array
splitted_array
exit
right_arrat
arrat
right_arrat
left_array
splitted_array
exit
splitted_array
right_array
left_array
exit
left_sum
right_sum
array
exit
dep[:values]
dep[:depth]
dep
deepest_val[:values]
deepest_val
exit
hash_to_sort
sorted_keys
c
h
hh
exit
c
C
c
hh.keys
hh.values
value
key
c
o
c
o
c
o
c
o
c
o
c
!o.valid?
o.valid?
c
o.valid?
o
c
o
c
o
c
o
c
o.order_products.first.errors.full_messages
o
c
o.order_products.first.errors.full_messages
o.save
o.order_products.push OrderProduct.new(product_id: muffins.id, quantity: 10, subtotal: 500, sale_price: 50)
o = Order.new
o.save
o.order_products
o
c
OrderProduct.build
o
c
o.order_products.first.errors.full_messages
o.valid?
o
c
o.order_products.first.errors.full_messages
o.order_products.first.valid?
o.errors.full_messages
o
с
banana_bread.idс
с
banana_bread.id
maxim.id
muffins.id
o.errors.full_messages
o.errors.full_messagesc
o
c
o.valid?
o
c
o.errors.full_messagesc
o.errors.full_messages
o.errors
o.valid?
Order.create!(client_id: maxim.id, order_products: [
          OrderProduct.new(product_id: muffins.id, quantity: 10, sale_price: 50),
          OrderProduct.new(product_id: banana_bread.id, quantity: 5, sale_price: 250)]): 
Order
expect(Production.where(product_id: banana_bread.id).sum(:cost_to_make)).to eq(554.3)~
Production.create!(recipe_id: joergs_banana_bread.id, product_amount: 10 )
Recipe
recipe
grandmas_muffins
joergs_banana_bread
expect(Production.where(product_id: banana_bread.id).sum(:cost_to_make)).to eq(554.3)
product_id
c
Inventory.where(product_id: rp.product_id).sum(:current_amount_left).to_s
((rp.product_amount || 0) * change_in_quantity).to_s
rp.product
c
prod_2.id
prod_1.id
prod_1
